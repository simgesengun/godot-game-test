[gd_scene load_steps=14 format=2]

[ext_resource path="res://Entities/Enemies/Slug/spinner.png" type="Texture" id=1]
[ext_resource path="res://Entities/Enemies/Stats.tscn" type="PackedScene" id=2]
[ext_resource path="res://Entities/Enemies/Slug/Slug.gd" type="Script" id=3]
[ext_resource path="res://Entities/Hitbox.tscn" type="PackedScene" id=4]
[ext_resource path="res://Entities/Enemies/PlayerDetectionZone.tscn" type="PackedScene" id=5]
[ext_resource path="res://Entities/Enemies/EffectsAnimation.tscn" type="PackedScene" id=6]
[ext_resource path="res://Entities/Enemies/EnemyHurtbox.tscn" type="PackedScene" id=7]
[ext_resource path="res://Entities/Enemies/Slug/EffectFSM.gd" type="Script" id=8]

[sub_resource type="CircleShape2D" id=1]
radius = 19.0

[sub_resource type="GDScript" id=2]
script/source = "extends \"res://Entities/StateMachine.gd\"

export (NodePath) var stats_path
onready var stats = get_node(stats_path)

enum states{
	IDLE,
	FOLLOW,
	ATTACK,
	FROZEN,
	DEAD
}
func _ready():
	call_deferred(\"set_state\",states.IDLE)
	stats.connect(\"no_health\",self,\"_no_health\")
	stats.connect(\"immobilized\",self,\"_immobilized\")

func _state_logic(delta):
	parent._apply_gravity()
	if ![states.ATTACK, states.FROZEN].has(state):
		parent._apply_movement(delta)
		parent._flip()
	if state == states.IDLE:
		parent._idle(delta)
	elif state == states.FOLLOW:
		parent._follow(delta)

func _get_transition(delta):
	match state:
		states.IDLE:
			if parent._should_follow():
				return states.FOLLOW
		states.FOLLOW:
			if parent._should_attack():
				return states.ATTACK
			elif not parent._should_follow():
				return states.IDLE
		states.ATTACK:
			if not parent._should_attack():
				return states.IDLE
		states.FROZEN:
			if parent.stats.speed > 0:
				return states.IDLE
		states.DEAD:
			pass

func _enter_state(new_state, old_state):
	print(states.keys()[new_state])
	match new_state:
#		states.IDLE:
#			animated_sprite.play(\"idle\")
#		states.WALK:
#			animated_sprite.play(\"walk\")
#		states.FOLLOW:
#			animated_sprite.play(\"walk\")
#		states.ATTACK:
#			animated_sprite.play(\"idle\")
#		states.FROZEN:
#			animated_sprite.play(\"idle\")
		states.DEAD:
			yield(get_tree().create_timer(.5), \"timeout\")
			parent.queue_free()

func _exit_state(old_state, new_state):
	pass

func _immobilized():
	set_state(states.FROZEN)

func _no_health():
	set_state(states.DEAD)


"

[sub_resource type="CircleShape2D" id=3]
radius = 94.7624

[sub_resource type="CircleShape2D" id=4]
radius = 25.0

[sub_resource type="CapsuleShape2D" id=5]
radius = 20.0
height = 10.0

[node name="Slug" type="KinematicBody2D"]
collision_layer = 4
script = ExtResource( 3 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( -19, -19 )
scale = Vector2( 0.607163, 0.623637 )
texture = ExtResource( 1 )
centered = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 1 )

[node name="Stats" parent="." instance=ExtResource( 2 )]

[node name="StateMachine" type="Node" parent="."]
script = SubResource( 2 )
stats_path = NodePath("../Stats")

[node name="EffectFSM" type="Node" parent="."]
script = ExtResource( 8 )

[node name="PlayerDetectionZone" parent="." instance=ExtResource( 5 )]

[node name="CollisionShape2D" parent="PlayerDetectionZone" index="0"]
shape = SubResource( 3 )

[node name="Hitbox" parent="." instance=ExtResource( 4 )]
visible = false
collision_layer = 0
collision_mask = 8

[node name="CollisionShape2D" parent="Hitbox" index="0"]
shape = SubResource( 4 )

[node name="EffectsAnimation" parent="." instance=ExtResource( 6 )]

[node name="EnemyHurtbox" parent="." instance=ExtResource( 7 )]
effected_by = [ true, true, true, true, true ]
effect_fsm_path = NodePath("../EffectFSM")

[node name="CollisionShape2D" parent="EnemyHurtbox" index="0"]
rotation = 1.5708
shape = SubResource( 5 )

[node name="FloorChecker" type="RayCast2D" parent="."]
position = Vector2( 19, 16 )
enabled = true
cast_to = Vector2( 0, 15 )
[connection signal="immobilized" from="Stats" to="StateMachine" method="_on_Stats_immobilized"]
[connection signal="no_health" from="Stats" to="StateMachine" method="_on_Stats_no_health"]
[connection signal="area_entered" from="Hitbox" to="." method="_on_Hitbox_area_entered"]
[connection signal="area_exited" from="Hitbox" to="." method="_on_Hitbox_area_exited"]

[editable path="PlayerDetectionZone"]

[editable path="Hitbox"]

[editable path="EnemyHurtbox"]
